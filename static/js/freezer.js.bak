// Global state
const state = {
  items: [],
  activeLocation: 'all'
};

// DOM Elements
document.addEventListener('DOMContentLoaded', () => {
  // Initialize the app
  initApp();
  
  // Add event listeners
  document.getElementById('addItemBtn').addEventListener('click', showAddItemModal);
  document.getElementById('addItemForm').addEventListener('submit', handleAddItem);
  document.getElementById('importItemsBtn').addEventListener('click', showImportModal);
  document.getElementById('importForm').addEventListener('submit', handleImportItems);
  
  // Freezer location buttons
  document.querySelectorAll('.freezer-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const target = btn.getAttribute('data-target');
      switchFreezerLocation(target);
    });
  });
  
  // Close modal when clicking on X or outside the modal
  document.querySelectorAll('.close').forEach(closeBtn => {
    closeBtn.addEventListener('click', closeModals);
  });
  
  window.addEventListener('click', (e) => {
    document.querySelectorAll('.modal').forEach(modal => {
      if (e.target === modal) {
        modal.style.display = 'none';
      }
    });
  });
});

// Initialize the application
async function initApp() {
  try {
    await fetchItems();
    renderItems();
  } catch (error) {
    console.error('Error initializing app:', error);
    showNotification('Error initializing app: ' + error.message, 'error');
  }
}

// Switch between freezer locations
function switchFreezerLocation(location) {
  // Update active location
  state.activeLocation = location;
  
  // Update button UI
  document.querySelectorAll('.freezer-btn').forEach(btn => {
    if (btn.getAttribute('data-target') === location) {
      btn.classList.add('active');
    } else {
      btn.classList.remove('active');
    }
  });
  
  // Re-render items for the selected location
  renderItems();
}

// Fetch items from the API
async function fetchItems() {
  try {
    const response = await fetch('/api/items');
    if (!response.ok) throw new Error('Failed to fetch items');
    state.items = await response.json();
  } catch (error) {
    console.error('Error fetching items:', error);
    showNotification('Error fetching items: ' + error.message, 'error');
    throw error;
  }
}

// Render items to the DOM
function renderItems() {
  // Get the container
  const itemsContainer = document.getElementById('freezer-items-container');
  
  // Check if the container exists
  if (!itemsContainer) {
    console.error('Error: freezer-items-container element not found');
    return;
  }
  
  itemsContainer.innerHTML = '';
  
  // Filter items for the selected freezer location
  let freezerItems = [];
  
  if (state.activeLocation === 'all') {
    // Show all freezer items
    freezerItems = state.items.filter(item => item.location === 'freezer');
  } else {
    // Show items for specific freezer location
    freezerItems = state.items.filter(item => 
      item.location === 'freezer' && 
      item.freezerLocation === state.activeLocation
    );
  }
  
  if (freezerItems.length === 0) {
    const locationName = state.activeLocation === 'all' ? 'any freezer' : `the ${state.activeLocation} freezer`;
    itemsContainer.innerHTML = `<p>No items found in ${locationName}. Add some items!</p>`;
    return;
  }
  
  const itemsGrid = document.createElement('div');
  itemsGrid.className = 'item-grid';
  
  freezerItems.forEach(item => {
    const itemCard = createItemCard(item);
    itemsGrid.appendChild(itemCard);
  });
  
  itemsContainer.appendChild(itemsGrid);
}

// Create an item card element
function createItemCard(item) {
  const card = document.createElement('div');
  card.className = 'item-card';
  
  // Check if item is expired or expiring soon
  const today = new Date();
  const expiryDate = new Date(item.expiry_date);
  const daysUntilExpiry = Math.ceil((expiryDate - today) / (1000 * 60 * 60 * 24));
  
  if (daysUntilExpiry < 0) {
    card.classList.add('expired');
  } else if (daysUntilExpiry <= 7) {
    card.classList.add('expiring-soon');
  }
  
  // Show subcategory if available
  const subcategoryHtml = item.subcategory ? `
    <div class="item-detail">
      <span class="detail-label">Subcategory:</span>
      <span>${item.subcategory}</span>
    </div>` : '';
  
  card.innerHTML = `
    <div class="item-content">
      <div class="item-header">
        <span class="item-title">${item.name}</span>
        <span class="item-category">${item.quantity}</span>
      </div>
      <div class="item-details">
        <div class="item-detail">
          <span class="detail-label">Location:</span>
          <span>${capitalizeFirstLetter(item.freezerLocation)} Freezer</span>
        </div>
        ${subcategoryHtml}
        <div class="item-detail">
          <span class="detail-label">Pack Type:</span>
          <span>${item.packType}</span>
        </div>
        <div class="item-detail">
          <span class="detail-label">Added:</span>
          <span>${formatDate(item.added_date)}</span>
        </div>
        <div class="item-detail">
          <span class="detail-label">Expires:</span>
          <span>${formatDate(item.expiry_date)} ${getExpiryText(daysUntilExpiry)}</span>
        </div>
      </div>
      <div class="item-actions">
        <button class="btn btn-danger" onclick="deleteItem(${item.id})">Delete</button>
        <button class="btn" onclick="editItem(${item.id})">Edit</button>
      </div>
    </div>
  `;
  
  return card;
}

// Helper function to capitalize first letter
function capitalizeFirstLetter(string) {
  if (!string) return '';
  return string.charAt(0).toUpperCase() + string.slice(1);
}

// Format a date string
function formatDate(dateString) {
  if (!dateString) return 'N/A';
  
  try {
    const options = { year: 'numeric', month: 'short', day: 'numeric' };
    return new Date(dateString).toLocaleDateString(undefined, options);
  } catch (error) {
    console.error('Error formatting date:', error);
    return dateString;
  }
}

// Get expiry text based on days until expiry
function getExpiryText(days) {
  if (days < 0) {
    return `<span style="color: var(--danger-color);">(Expired ${Math.abs(days)} days ago)</span>`;
  } else if (days === 0) {
    return `<span style="color: var(--warning-color);">(Expires today)</span>`;
  } else if (days <= 7) {
    return `<span style="color: var(--warning-color);">(Expires in ${days} days)</span>`;
  }
  return '';
}

// Show the add item modal
function showAddItemModal() {
  const modal = document.getElementById('addItemModal');
  if (!modal) {
    console.error('Error: addItemModal element not found');
    return;
  }
  
  modal.style.display = 'block';
  
  const form = document.getElementById('addItemForm');
  if (form) {
    form.reset();
  }
  
  // Set default freezer location to current selection (if not "all")
  const freezerLocationSelect = document.getElementById('freezerLocation');
  if (freezerLocationSelect && state.activeLocation !== 'all') {
    freezerLocationSelect.value = state.activeLocation;
  }
  
  // Set default expiry date to 3 months from now
  const expiryDateInput = document.getElementById('itemExpiryDate');
  if (expiryDateInput) {
    const defaultExpiry = new Date();
    defaultExpiry.setMonth(defaultExpiry.getMonth() + 3);
    expiryDateInput.valueAsDate = defaultExpiry;
  }
}

// Show the import modal
function showImportModal() {
  const modal = document.getElementById('importModal');
  if (!modal) {
    console.error('Error: importModal element not found');
    return;
  }
  
  modal.style.display = 'block';
  
  const form = document.getElementById('importForm');
  if (form) {
    form.reset();
  }
  
  // Set default freezer location to current selection (if not "all")
  const importFreezerLocationSelect = document.getElementById('importFreezerLocation');
  if (importFreezerLocationSelect && state.activeLocation !== 'all') {
    importFreezerLocationSelect.value = state.activeLocation;
  }
}

// Close all modals
function closeModals() {
  document.querySelectorAll('.modal').forEach(modal => {
    modal.style.display = 'none';
  });
}

// Handle add item form submission
async function handleAddItem(e) {
  e.preventDefault();
  
  const nameInput = document.getElementById('itemName');
  const subcategoryInput = document.getElementById('itemSubcategory');
  const freezerLocationInput = document.getElementById('freezerLocation');
  const packTypeInput = document.getElementById('itemPackType');
  const quantityInput = document.getElementById('itemQuantity');
  const expiryDateInput = document.getElementById('itemExpiryDate');
  
  if (!nameInput || !freezerLocationInput || !packTypeInput || !quantityInput || !expiryDateInput) {
    showNotification('Error: Form fields not found', 'error');
    return;
  }
  
  const newItem = {
    name: nameInput.value,
    subcategory: subcategoryInput ? subcategoryInput.value : '',
    location: 'freezer',
    freezerLocation: freezerLocationInput.value,
    packType: packTypeInput.value,
    quantity: quantityInput.value,
    expiry_date: expiryDateInput.value
  };
  
  try {
    const response = await fetch('/api/items', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(newItem)
    });
    
    if (!response.ok) throw new Error('Failed to add item');
    
    const addedItem = await response.json();
    state.items.push(addedItem);
    renderItems();
    closeModals();
    showNotification('Item added successfully!', 'success');
  } catch (error) {
    console.error('Error adding item:', error);
    showNotification('Error adding item: ' + error.message, 'error');
  }
}

// Handle import items form submission
async function handleImportItems(e) {
  e.preventDefault();
  
  const fileInput = document.getElementById('fileInput');
  const freezerLocationInput = document.getElementById('importFreezerLocation');
  
  if (!fileInput || !freezerLocationInput) {
    showNotification('Error: Form fields not found', 'error');
    return;
  }
  
  const file = fileInput.files[0];
  const freezerLocation = freezerLocationInput.value;
  
  if (!file) {
    showNotification('Please select a file to import', 'error');
    return;
  }
  
  try {
    // Check file type
    const fileType = file.name.split('.').pop().toLowerCase();
    if (!['csv', 'xlsx', 'xls'].includes(fileType)) {
      showNotification('Please upload a CSV or Excel file', 'error');
      return;
    }
    
    // Create form data and send to server
    const formData = new FormData();
    formData.append('file', file);
    formData.append('location', 'freezer');
    formData.append('freezerLocation', freezerLocation);
    
    const response = await fetch('/api/import', {
      method: 'POST',
      body: formData
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.detail || 'Failed to import items');
    }
    
    const result = await response.json();
    state.items = result.items;
    
    renderItems();
    closeModals();
    showNotification(result.message || 'Items imported successfully!', 'success');
  } catch (error) {
    console.error('Error importing items:', error);
    showNotification('Error importing items: ' + error.message, 'error');
  }
}

// Delete an item
async function deleteItem(id) {
  if (!confirm('Are you sure you want to delete this item?')) return;
  
  try {
    const response = await fetch(`/api/items/${id}`, {
      method: 'DELETE'
    });
    
    if (!response.ok) throw new Error('Failed to delete item');
    
    state.items = state.items.filter(item => item.id !== id);
    renderItems();
    showNotification('Item deleted successfully!', 'success');
  } catch (error) {
    console.error('Error deleting item:', error);
    showNotification('Error deleting item: ' + error.message, 'error');
  }
}

// Edit an item
function editItem(id) {
  // This would be implemented in a real app
  alert('Edit functionality would be implemented here');
}

// Show a notification
function showNotification(message, type) {
  try {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // Make the notification visible
    setTimeout(() => {
      notification.classList.add('show');
    }, 10);
    
    // Remove the notification after 3 seconds
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }, 3000);
  } catch (error) {
    console.error('Error showing notification:', error);
  }
} 